Python Spike Toolbox
====================

Introduction
------------
In order to prototype experiments on neuromorphic hardware, one needs a tool which can easily translate hardware AER events into digital spike trains, which can me manipulated and analyzed with
appropriate software tools.

The python Spike Toolbox has been developed to meet these requirements and makes use of NeuroTools (FACETS) for analyzing the Spike trains. 



Examples of Application
_______________________

#. Define Address or Address-Events for mapping between two neurons
#. Defining spike trains for simulations.
#. Extract Addresses from Address-Events
#. Plot and Analyze Address-Events

How it works
____________

Explanation of the modules/architecture

* STas
  
  - STAddrSpec
    
    This is the basic class of pyST, which contains the functions for translating physical addresses (used by hardwre) to understandable addresses and to logical addresses (used by plotting and analysis software mostly). 
    Usually they are not defined by hand, but directly with pyNCS_ in conjunction with a **chip csv file**, which are available in the pyNCS_ repository. The pyNCS_ Setup class takes care of loading the chip objects.

  - STChannelAddressing

    This class is a collection of STAddrSpec objects. In a multi-chip system, different chips are available, each of them having their own addressing scheme (*i.e.* their own STAddrSpec). This class takes care of translating the addresses for such a system. 


* STsl
  
  This module serves as an interface to Neurotools_



Address Translation Mechanism
-----------------------------

The address specification takes care of the *Address-Event* translation most of theirs uses, such as plotting, analysis, spike train creation, spike train extraction, mappings.

However, for this, is is extremely important to understand the various address types that exist in pyST. These include:

* Physical addresses, unsigned  32 bit integers (unit32). It used by hardware and should never be used directly (except for mapping).

.. code-block:: python
   
   #This creates the logical addresses: The addresses correspond to row 20 to 30, column 0, polarity 0 of the retina.
   >>> Addr=[range(20,30),0,0]
   >>> setup.seq.addrPhysicalConstruct({0:Addr})
       array([5120, 5376, 5632, 5888, 6144, 6400, 6656, 6912, 7168, 7424], dtype=uint32)

* Logical addresses, python floats, used by software such as SpikeLists. It has the advantage of convenientlyrepresenting complicated addresses in a single floating number. Example:

.. code-block:: python
   
   #This creates the logical addresses: The addresses correspond to row 20 to 30, column 0, polarity 0 of the retina.

   >>> setup.seq[0].addrLogicalConstruct(Addr)

       array([ 20.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.],dtype='float')

or if you have several chips:

.. code-block:: python
   
   #This creates the logical addresses: The addresses correspond to row 20 to 30, column 0, polarity 0 of the retina.

   >>> setup.seq.addrLogicalConstruct(Addr)
        
    {1:array([ 20.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.], dtype=float)}

* Human Readable addresses do not exist per se.  It is only a method to conveniently define/decode physical or logical. In fact, it corresponds to the ``Addr`` variable in the examples above.

*Remark:* There exists function for extracting and constructing physical and logical addresses. Construction and Extraction are both meant from the point of view of Human Readable addresses.

*Remark:* Technically there exists functions for translating from physical to logical directly (without using extraction/construction functions). But these are intended for internal use only. 


.. Using pyST for creating mappings
.. ________________________________
.. 
.. 
.. Using NeuroTools in combination with pyST
.. _________________________________________


.. _NeuroTools: http://neuralensemble.org/trac/NeuroTools
.. _pyNCS: pyncs.html



          
